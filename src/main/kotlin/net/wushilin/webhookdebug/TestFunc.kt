package net.wushilin.webhookdebug

import java.util.*


fun main(args:Array<String>) {
    val data = ""

    val decoder = Base64.getDecoder()
    val result = decoder.decode(data)
    println(String(result))

}
